* e04_minibuffer.org
** Mini buffer Core
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p) ;; Treat 'y' as yes, 'n' as no
  (setq enable-recursive-minibuffers t) ;; nil
  (icomplete-mode 1)
  (setq resize-mini-windows t) ;; t for autosize nil for not

  ;; don't let the cursor go into minibuffer prompt
  (setq minibuffer-prompt-properties (quote (read-only t point-entered
                                                       minibuffer-avoid-prompt
                                                       face
                                                       minibuffer-prompt)))
#+END_SRC
** ido-mode
#+BEGIN_SRC emacs-lisp
(ido-mode t)  ;; Ido: interactively do things with buffers and files
; Use IDO for both buffer and file completion and ido-everywhere to t
(setq org-completion-use-ido t)
(setq ido-ignore-extensions t) 
(setq ido-everywhere t)
(setq ido-use-filename-at-point 'guess) 
(setq ido-create-new-buffer 'always)
(setq ido-max-directory-size 100000)
(setq ido-auto-merge-delay-time 0.5)
(ido-mode (quote both))
; Use the current window when visiting files and buffers with ido
(setq ido-default-file-method 'selected-window)
(setq ido-default-buffer-method 'selected-window)
(setq ido-file-extensions-order '(".org" ".txt" ".py" ".emacs" ".xml" ".el" ".ini" ".cfg" ".cnf"))
#+END_SRC
   
** elodc
#+BEGIN_SRC emacs-lisp
  (require 'eldoc)
  (setq eldoc-idle-delay 0)
  (setq eldoc-echo-area-use-multiline-p t)
  (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'ess-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'R-mode-hook 'turn-on-eldoc-mode)
#+END_SRC


** helm

*** Load Helm

#+BEGIN_SRC emacs-lisp
(require 'helm-config)
(require 'helm-descbinds)
(require 'helm-migemo)
(require 'helm-gtags)
(setq helm-idle-delay             0.2
      helm-input-idle-delay       0.2
      helm-candidate-number-limit 200
      helm-buffer-max-length      50)
#+END_SRC

*** Helm Keybindings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x b") 'helm-for-files)

#+END_SRC

(require 'helm-command)
(require 'helm-descbinds)

(let ((key-and-func
       `((,(kbd "C-r")   helm-for-files)
         (,(kbd "C-^")   helm-c-apropos)
         (,(kbd "C-;")   helm-resume)
         (,(kbd "M-s")   helm-occur)
         (,(kbd "M-x")   helm-M-x)
         (,(kbd "M-y")   helm-show-kill-ring)
         (,(kbd "M-z")   helm-do-grep)
         (,(kbd "C-S-h") helm-descbinds)
        )))
  (loop for (key func) in key-and-func
        do (global-set-key key func)))
(require 'migemo)
;; for cmigemo
(setq migemo-command "cmigemo"
      migemo-options '("-q" "--emacs" "-i" "\g")
      migemo-dictionary "/usr/share/cmigemo/utf-8/migemo-dict"
      migemo-user-dictionary nil
      migemo-regex-dictionary nil
      migemo-coding-system 'utf-8)
;; for helm-migemo
(require 'helm-migemo)
(setq helm-use-migemo t)
;; 候補が表示されないときがあるので
;; migemoらないように設定
(defadvice helm-c-apropos
  (around ad-helm-apropos activate)
  (let ((helm-use-migemo nil))
    ad-do-it))
(defadvice helm-M-x
  (around ad-helm-M-x activate)
  (let ((helm-use-migemo nil))
    ad-do-it))
(require 'popwin)
(setq display-buffer-function 'popwin:display-buffer)
(push '("^\*helm .+\*$" :regexp t) popwin:special-display-config)
