#+TITLE:auctex 
#+AUTHOR: Bingwei TIAN
#+EMAIL: bwtian@gmail.com
#+OPTIONS: toc:nil num:nil 
#+STARTUP: showall
#+CREATED: [2014-06-03 Tue 11:09]  
#+LASTEDIT:  
#+CATEGORIES: Org-babel for Emacs init

* e21_auctex.org
Latex Editor: AuxTex

** Invoke Tex Packages
#+BEGIN_SRC emacs-lisp
;; (setenv "PATH" (concat "/usr/texbin:" (getenv "PATH")))
  (require 'tex-site)   ; invoke the AUCTeX package (LaTeX support)
  (if (string-equal system-type "windows-nt")
      (require 'tex-mik))
(setq TeX-file-extensions
      '("Snw" "Rnw" "nw" "tex" "sty" "cls" "ltx" "texi" "texinfo"))
#+END_SRC

** Load Auctex mode
#+BEGIN_SRC emacs-lisp
 (load "auctex-pkg.el" nil t t)
 ;;(load "latex.el" nil t t) ;; import for not ask master files
#+END_SRC
 
** Close default Tex mode
#+BEGIN_SRC emacs-lisp
 (setq TeX-auto-save t)
 (setq TeX-parse-self t)
 (setq-default TeX-master nil)
#+END_SRC
** Auctex Core
Auto Completion and Auto Save ;; http://www.emacswiki.org/emacs/AUCTeX
#+BEGIN_SRC emacs-lisp
(setq LaTeX-math-mode t)
(setq TeX-electric-escape t)
(setq TeX-engine 'pdflatex)
(setq TeX-PDF-mode t) ;; use pdflatex instead of latex by default
#+END_SRC
** Enable synctex correlation
#+BEGIN_SRC emacs-lisp
(setq TeX-source-correlate-method 'synctex)
;; Enable synctex generation. Even though the command shows
;; as "latex" pdflatex is actually called
(custom-set-variables '(LaTeX-command "latex -synctex=1") )
#+END_SRC
** Minor modes with Latex
#+BEGIN_SRC emacs-lisp
(add-hook 'LaTeX-mode-hook 'visual-line-mode)
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(add-hook 'LaTeX-mode-hook 'linum-mode)
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(add-hook 'LaTeX-mode-hook 'folding-mode)
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
;; enable auto-fill mode, nice for text
(add-hook 'LaTeX-mode-hook 'auto-fill-mode)
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
(setq reftex-plug-into-AUCTeX t)
#+END_SRC
(add-hook 'LaTeX-mode-hook
               (lambda ()
                 (setq TeX-auto-untabify t     ; remove all tabs before saving
                       TeX-engine 'xetex       ; use xelatex default
                       TeX-show-compilation t) ; display compilation windows
                 (TeX-global-PDF-mode t)       ; PDF mode enable, not plain
                 (setq TeX-save-query nil)
                 (imenu-add-menubar-index)
                 ;;(setq TeX-open-quote "«~")
                 ;;(setq TeX-close-quote "~»")
                 (define-key LaTeX-mode-map (kbd "TAB") 'TeX-complete-symbol)))
** Use latexmk for compilation by default
#+srcname: latemkdefault
(eval-after-load "tex"
      '(add-to-list 'TeX-command-list '("latexmk" "latexmk -synctex=1 -shell-escape -pdf %s" TeX-run-TeX nil t :help "Process file with latexmk")))
(eval-after-load "tex"
      '(add-to-list 'TeX-command-list '("xelatexmk" "latexmk -synctex=1 -shell-escape -xelatex %s" TeX-run-TeX nil t :help "Process file with xelatexmk")))
(add-hook 'TeX-mode-hook '(lambda () (setq TeX-command-default "latexmk")))  


** TeX-texify
;;; http://www.emacswiki.org/emacs/TN

(require 'tex-buf)
(defun TeX-command-default (name)
  "Next TeX command to use. Most of the code is stolen from `TeX-command-query'."
  (cond ((if (string-equal name TeX-region)
             (TeX-check-files (concat name "." (TeX-output-extension))
                              (list name)
                              TeX-file-extensions)
           (TeX-save-document (TeX-master-file)))
         TeX-command-default)
        ((and (memq major-mode '(doctex-mode latex-mode))
              (TeX-check-files (concat name ".bbl")
                               (mapcar 'car
                                       (LaTeX-bibliography-list))
                               BibTeX-file-extensions))
         ;; We should check for bst files here as well.
         TeX-command-BibTeX)
        ((TeX-process-get-variable name
                                   'TeX-command-next
                                   TeX-command-Show))
        (TeX-command-Show)))

;;;  from wiki
(defcustom TeX-texify-Show t
  "Start view-command at end of TeX-texify?"
  :type 'boolean
  :group 'TeX-command)

(defcustom TeX-texify-max-runs-same-command 5
  "Maximal run number of the same command"
  :type 'integer
  :group 'TeX-command)

(defun TeX-texify-sentinel (&optional proc sentinel)
  "Non-interactive! Call the standard-sentinel of the current LaTeX-process.
If there is still something left do do start the next latex-command."
  (set-buffer (process-buffer proc))
  (funcall TeX-texify-sentinel proc sentinel)
  (let ((case-fold-search nil))
    (when (string-match "\\(finished\\|exited\\)" sentinel)
      (set-buffer TeX-command-buffer)
      (unless (plist-get TeX-error-report-switches (intern (TeX-master-file)))
        (TeX-texify)))))

(defun TeX-texify ()
  "Get everything done."
  (interactive)
  (let ((nextCmd (TeX-command-default (TeX-master-file)))
        proc)
    (if (and (null TeX-texify-Show)
             (equal nextCmd TeX-command-Show))
        (when  (called-interactively-p 'any)
          (message "TeX-texify: Nothing to be done."))
      (TeX-command nextCmd 'TeX-master-file)
      (when (or (called-interactively-p 'any)
                (null (boundp 'TeX-texify-count-same-command))
                (null (boundp 'TeX-texify-last-command))
                (null (equal nextCmd TeX-texify-last-command)))
        (mapc 'make-local-variable '(TeX-texify-sentinel TeX-texify-count-same-command TeX-texify-last-command))
        (setq TeX-texify-count-same-command 1))
      (if (>= TeX-texify-count-same-command TeX-texify-max-runs-same-command)
          (message "TeX-texify: Did %S already %d times. Don't want to do it anymore." TeX-texify-last-command TeX-texify-count-same-command)
        (setq TeX-texify-count-same-command (1+ TeX-texify-count-same-command))
        (setq TeX-texify-last-command nextCmd)
        (and (null (equal nextCmd TeX-command-Show))
             (setq proc (get-buffer-process (current-buffer)))
             (setq TeX-texify-sentinel (process-sentinel proc))
             (set-process-sentinel proc 'TeX-texify-sentinel))))))

(add-hook 'LaTeX-mode-hook
         '(lambda ()
            (define-key LaTeX-mode-map (kbd <"C-c C-a">) 'TeX-texify)))

** Note
;;; "LaTeX+DVI+PS+PDF+PDFViewer" routine
(setq my-tex-commands-extra (list 
                            (list "Custom Compile" "latex -interaction=nonstopmode -output-directory=../Outputs/ %s.tex && cd ../Outputs && bibtex %s.aux && cd ../TeX && latex -interaction=nonstopmode -output-directory=../Outputs/ %s.tex && latex -interaction=nonstopmode -output-directory=../Outputs/ %s.tex && mv ../Outputs/%s.dvi ../DVI/%s.dvi && dvips ../DVI/%s.dvi -o ../PS/%s.ps && ps2pdf ../PS/%s.ps ../PDF/%s.pdf && evince ../PDF/%s.pdf" 'TeX-run-command nil t)))
(require 'tex) 
(setq TeX-command-list (append TeX-command-list my-tex-commands-extra))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                    AUCTeX的用法                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

C-c C-c         系列命令，如下
  latex         编译
  view         一般编译一次或两次以后会自动转换到这个格式
  file         dvips
  print         view ps
  index         makeidx
  bibtex     bibtex

C-c C-r         对区域操作，可以选中一个区域
         latex，然后再重复命令看输出

C-c ~             进入latex-math-mode，进入后可以使用缩写
    `         左上角的`，例如`a生成\alpha{}

C-c C-e         LaTeX-environment，加入各种环境

C-c C-m         加入macro，如\frac,\ref等等很多，也可以用
C-c RET

\         TeX-electric-escap，这个命令需要在.emamcs里声明
         (setq  TeX-electric-escape t)，以后在输入'\'后
        会直接进入macro状态，相当于C-c C-m，唯一不同的就是
        SPC相当于完成并退出。



C-c C-s         加入章节,LaTeX-section,可以有一些参数，
        如toc在目录里生成标题的简称， 不过一般不加也可以。
         (setq LaTeX-section-hook
             '(LaTeX-section-heading
               LaTeX-section-title
               LaTeX-section-toc
               LaTeX-section-section
               LaTeX-section-label))



C-c (         生成label，可以根据上下文自动加上key

C-c )         生成ref，并自动带上括号，有几个选项
  SPC         所有的选项
  e         equation align等
  f         figure等
  i         enumerate
  t         table
  s         section

C-c =         生成目录

C-c {            生成括号对，光标移到第一个括号前

C-c ]            补全命令,\end{}

M-RET         自动加入item，bibitem等

M-q              AUC TeX 里选择字体

$的自动补全     例如输入$$x$后，会自动补全剩下的$

C-c &            在Ref环境中，当光标停在一个
                 \ref,\label,\index,\cite,\bibitem
                 括号中的内容时，自动显示源（目标）文件

C-c ;         注释掉一行

C-c %         注释掉一段

C-c '            同上，（引号下边那个点）

C-c `            看编译结果中的错误（键盘左上角）
