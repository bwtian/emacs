* e02_core.org
** setting work directory
#+BEGIN_SRC emacs-lisp
  (setq default-directory "~/SparkleShare/")
#+END_SRC

** gitHub
#+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks t) ;; Avoid Yes No to Symbol link to Git-Control ed source file
(setq auto-revert-check-vc-info t)
(setq auto-revert-interval 1)
(add-hook 'find-file-hook
          '(lambda ()
             (when
                 (and buffer-file-name
                      (vc-backend buffer-file-name))
               (auto-revert-mode))))
#+END_SRC
** Recentf-mode
#+BEGIN_SRC emacs-lisp
  (recentf-mode 1) ; keep a list of recently opened files
  (add-hook 'after-init-hook 'recentf-mode)
  (setq recentf-max-saved-items 2000)
  ;; (setq recentf-save-file
  ;;       (expand-file-name
  ;;        (concat my:user-emacs-temporary-directory "recentf")))
  (setq recentf-auto-cleanup 'never)
  (run-with-idle-timer 300 t 'recentf-save-list)
  (run-with-idle-timer 600 t 'recentf-cleanup)

#+END_SRC


** Make pair of {,[ and (
*** skeleton-pair: enable pairing
#+BEGIN_SRC emacs-lisp
   (electric-pair-mode t)
   (setq skeleton-pair t) ;; Skeleton library provides pair insertion via the skeleton-insert-maybe
     (setq skeleton-pair-on-word t)
      (global-set-key "("  'skeleton-pair-insert-maybe)
      (global-set-key "["  'skeleton-pair-insert-maybe)
      (global-set-key "{"  'skeleton-pair-insert-maybe)
      (global-set-key "\'" 'skeleton-pair-insert-maybe)
      (global-set-key "\`" 'skeleton-pair-insert-maybe)
      ;; (global-set-key "\"" 'skeleton-pair-insert-maybe)
      ;; (global-set-key "\%" 'skeleton-pair-insert-maybe)
      ;; (global-set-key "\;" 'skeleton-pair-insert-maybe)
      ;; (global-set-key "\:" 'skeleton-pair-insert-maybe)
      ;; (global-set-key "<"  'skeleton-pair-insert-maybe)
  ;; for Latex
  ;;  (defun quoted-parentheses (arg)
  ;;       (interactive "P")
  ;;       (if (looking-back "\\\\")
  ;;           (skeleton-insert '(nil "(" _ "\\)") -1)
  ;;         (skeleton-pair-insert-maybe arg)))
  ;;  (defun quoted-brackets (arg)
  ;;       (interactive "P")
  ;;       (if (looking-back "\\\\")
  ;;           (skeleton-insert '(nil "[" _ "\\]") -1)
  ;;         (skeleton-pair-insert-maybe arg)))
  ;; (global-set-key "(" 'quoted-parentheses)
  ;; (global-set-key "[" 'quoted-brackets)
#+END_SRC

*** show-paren-mode color

#+BEGIN_SRC emacs-lisp
   (show-paren-mode t)                 ; turn paren-mode on match highlighting
   (setq show-paren-delay 0)           ; how long to wait?  default was o.15s
   (setq show-paren-style  'expression) ; highlight entire bracket expression alternatives are 'parenthesis' and 'mixed'
   (set-face-foreground    'show-paren-mismatch-face "red")
   (set-face-background    'show-paren-match-face nil) ;; for colors change nil to color
  ;; (set-face-foreground    'show-paren-match-face nil)
   (set-face-attribute     'show-paren-match-face nil
                       ;;:background nil :foreground nil
                       :underline t :weight 'extra-bold :overline nil :slant 'normal) ;; #ffff00
#+END_SRC

** Intendation
#+BEGIN_SRC emacs-lisp
  (setq default-tab-width 8)
  (setq-default indent-tabs-mode nil)
  (setq c-basic-offset 4)
  (setq tab-stop-list '(8 16 24 32 40 48 56 64 72 80))
  (global-set-key (kbd "RET") 'newline-and-indent) ;; == C-j
#+END_SRC

** Linewrapping
Linewrapping comes in a few flavors:
|------+---------------------+--------------+-----------------+---------+--------------+---------------+-----------------|
| Mode | Linewrapping        | Act Lines    | confilcted with | Effect  | Wrap at      | Line Ending   | Buffer Text     |
|------+---------------------+--------------+-----------------+---------+--------------+---------------+-----------------|
|      | default             | wrap         |                 |         | Window width | Window width  | not changed     |
| wrap | visual-line-mode    | soft wrap    |                 | display | Window Width | word boundary | not changed     |
|      | truncate-long-lines | soft visual  |                 |         | no           | far away      |                 |
| ll   | longlines-mode      | soft visual  | org-table, fill | display | fill-column  | word boundary | not changed     |
|------+---------------------+--------------+-----------------+---------+--------------+---------------+-----------------|
|      | word-wrap           |              |                 |         |              |               |                 |
|      | physical-line-mode  |              |                 |         |              |               |                 |
|------+---------------------+--------------+-----------------+---------+--------------+---------------+-----------------|
| fill | auto-fill-mode      | hard logical | longlines       | text    | fill-column  | word boundary | changed         |
|------+---------------------+--------------+-----------------+---------+--------------+---------------+-----------------|
|      | longlines-auto-wrap | hard logical | org-table       | text    | fill-column  | fill-column   | changed, danger |
|------+---------------------+--------------+-----------------+---------+--------------+---------------+-----------------|
*** Soft Wrap Lines::visual-line-mode<->lonelines-mode
+ visual-line-mode makes emacs act like a "usual" text editor (w.r.t. line
  wrappings), act on visual lines instead of logical lines
+ or for LaTeX:  M-x longlines-mode
#+BEGIN_SRC emacs-lisp
(global-visual-line-mode 1) ;; Make long lines soft wrapped at word boundary
;; (setq line-move-visual nil) ;; original behavior  with logical lines
;; line-wrap settings for code and one for text
(add-hook 'text-mode-hook '(lambda ()
    (setq truncate-lines nil
          word-wrap t)))
(add-hook 'prog-mode-hook '(lambda ()
    (setq truncate-lines t
          word-wrap nil)))
#+END_SRC
*** Truncate long lines::truncate-lines


#+BEGIN_SRC emacs-lisp
  ;;(set-default 'truncate-lines t)  ;;Make lines NOT soft-wrap but short lines
  ;;(define-key global-map (kbd "C-c M-l") 'toggle-truncate-lines)
  ;; (setq truncate-partial-width-windows nil)  ;; for vertically-split windows
  ;; do not truncate and wrap long lines
  ;; (setq truncate-partial-width-windows nil)
  ;; (setq truncate-lines nil)
  ;; ;; and move up down end begin over the real visible screen lines
  ;; (require 'physical-line)
  ;; (physical-line-mode 1)
  ;; (global-set-key [(end)] 'end-of-line)
  ;; (global-set-key [(home)] 'beginning-of-line)
  ;; (add-hook 'dired-mode-hook (lambda () (setq truncate-lines t)))
  ;; (add-hook 'diff-mode-hook (lambda () (setq truncate-lines t)))
(add-hook 'minibuffer-setup-hook
      (lambda () (setq truncate-lines nil)))
#+END_SRC
*** Auto Fill Minor Mode
+ auto-fill-mode makes a newline if the line reaches 80 chars (or so)
M-q::fill-paragraph
#+BEGIN_SRC emacs-lisp
  ;; default fill column is 70, why?
  (setq default-fill-column 80) ;;60 half paper, 70, 72 good,80,120 full paper
  (setq-default auto-fill-function 'do-auto-fill)
  (setq sentence-end-double-space nil) ;; Sentence end with a . not with 2 spaces
  ;;(setq require-final-newline t) ;; End a file with a newline
  (setq next-line-add-newlines nil) ;; Stop at the end of the file, not just add
  ;; lines
  (setq paragraph-start '"^\\([　・○<\t\n\f]\\|(?[0-9a-zA-Z]+)\\)")
  (setq text-mode-hook 'turn-on-auto-fill)
  (setq org-mode-hook 'turn-on-auto-fill)
  (setq LaTeX-mode-hook 'turn-on-auto-fill)
#+END_SRC

** Align
#+BEGIN_SRC emacs-lisp
  (require 'align)
  ;; >> Shell and gmt
  (add-to-list 'align-rules-list
  '(shell-assignment
  (regexp . "\\( *\\)>>")
  ))
  ;; Shell and gmt '
  (add-to-list 'align-rules-list
  '(lisp-assignment
  (regexp . "\\( *\\)'")
  ))
  ;; R <-
  (add-to-list 'align-rules-list
  '(R-assignment
  (regexp . "\\( *\\)<-")
  ))
  ;; Comment #
  (add-to-list 'align-rules-list
  '(comment-assignment
  (regexp . "\\( *\\)#")
  ))
  ;; Python
  (add-to-list 'align-rules-list
  '(python-assignment
  (regexp . "\\( *\\)=")
  ))
  ;; Latex Tabel&
  (add-to-list 'align-rules-list
  '(yatex-table
  (regexp . "\\(\\s-*\\)&")
  ))
  ;; Latex %
  (add-to-list 'align-rules-list
  '(tex-comment
  (regexp . "\\( *\\)%")
  ))
  (global-set-key (kbd "C-c C-a") 'align)
  (global-set-key (kbd "C-c M-a") 'align-regexp)
#+END_SRC

** Misc Default Mode
#+BEGIN_SRC emacs-lisp
  (setq transient-mark-mode t)
  (global-auto-revert-mode t)
  (setq read-file-name-completion-ignore-case t)
#+END_SRC
