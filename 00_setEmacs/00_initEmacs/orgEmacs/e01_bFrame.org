* e01_frame.org
** Init-Frame and Color

#+BEGIN_SRC emacs-lisp
   (setq default-frame-alist
           '((background-color . "DarkSlateGray") ;;Colors:black,darkblue,abc88b,DarkSlateGray,#171717
            (foreground-color  . "Wheat") ;;Colors:white,grey85,Wheat,#c0c0c0,tomato DarkGrey grey66
            (mouse-color       . "green")  ;;Colors:blue,steelblue,gold1
            (cursor-color      . "green"))) ;;Colors:green.red,white,gold2
#+END_SRC

** Font-lock Color 
#+BEGIN_SRC emacs-lisp
    ;;;; Font-lock color
    (global-font-lock-mode t)                                           ; S/R   TeX
    (setq font-lock-maximum-decoration t)

    (set-face-foreground 'font-lock-function-name-face   "Tomato")     ;DONE org1 fuctions...; lightBlue,Cyan,Skyblue ,lightskyblue,midnightblue;blue;pink;purple,"VioletRed"(ess)
    (set-face-foreground 'font-lock-variable-name-face   "Orange")      ;DONE org2  yellow gold gold1 Magenta,"Blue"(ess)
    (set-face-foreground 'font-lock-keyword-face         "Magenta")     ;DONE org3 if,for,function,lambda ;Cyan,Purple,Yellow; "MediumBlue"(ess)
    (set-face-foreground 'font-lock-comment-face         "Deepskyblue")      ;DONE org4 #  % "Firebrick"(ess) Sienna DarkGrey Grey80,SeaGreen,palegreen;  
    (set-face-foreground 'font-lock-type-face            "Goldenrod")      ;DONE org5 T,F 0~9 ?  "Palegreen" "Goldenrod"(ess) ;Sienna,lightpink;lightgreen;orange;lightskyblue;Goldenrod(ess);
    (set-face-foreground 'font-lock-constant-face        "Cyan")        ;DONE org6 require <- + - ==;Brown,;Magenta(ess),"VioletRed"
    (set-face-foreground 'font-lock-builtin-face         "lightSeaGreen")    ;DOEN org7 () [] {} Orchid4,MediumOrchid4,;#c476f1;palegreen;skyblue, Black
    (set-face-foreground 'font-lock-string-face          "Green")       ;DONE org8 "str" "str" ;Green, "SeaGreen"(ess);
    (set-face-foreground 'font-lock-warning-face         "Red")        ;DONE Warning Red  tomato
    ;; ;; for numbers
    (add-hook 'after-change-major-mode-hook
             '(lambda () (font-lock-add-keywords
                         nil
                        '(("\\([0-9]+\\)"
                          1 font-lock-type-face prepend)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
    ;;(setq initial-frame-alist '((top . 10) (left . 10) (width . 80) (height . 40)))
    (setq initial-frame-alist (quote ((fullscreen . maximized))))
    ;; (setq default-frame-alist
    ;;       (append (list
    ;;                '(alpha . (90 90)) ;; 90,85 ;; 100,100
    ;;                ) default-frame-alist))
#+END_SRC
** Bars
#+BEGIN_SRC emacs-lisp
  ;; Start Message
    (setq inhibit-startup-message t)  ;; nil=show, do not show log
  
  ;; Title Bar
    (setq frame-title-format "emacs@%b %f") ;; Show buffer name in Title bar
  
  ;; Menu Bar
    (menu-bar-mode t) ;; show menubar
    ;; (if (fboundp 'menu-bar-mode)
    ;;     (menu-bar-mode -1))
  
  ;; Tool Bar
    (tool-bar-mode -1) ;; 1 to show toolbar
    ;; (if (fboundp 'tool-bar-mode)
    ;; (tool-bar-mode -1)
  ;; Ruler Bar
    (add-hook 'window-configuration-change-hook (lambda () (ruler-mode 1)))
    (add-hook 'find-file-hook (lambda () (ruler-mode 1)))
  
 
  ;; ring-bell
  (setq ring-bell-function 'ignore)
#+END_SRC
** Mode line Bar == Status Bar 
#+BEGIN_SRC emacs-lisp
  ;; (setq-default mode-line-format
  ;;               '("-"
  ;;                 mode-line-mule-info
  ;;                 mode-line-modified
  ;;                 " "
  ;;                 mode-line-buffer-identification
  ;;                 " "
  ;;                  global-mode-string
  ;;                  " %[("
  ;;                  mode-name
  ;;                  mode-line-process
  ;;                  minor-mode-alist
  ;;                  "%n" ")%]"
  ;;                  (which-func-mode ("" which-func-format "-"))
  ;;                 "-%-"
  ;;                 ))
    (setq size-indication-mode t) ;; Size of the file
    (setq line-number-mode t) ;; Line number on mode-line bar
    (setq column-number-mode t) ;; Column number on mode-line bar
    (display-time-mode 1) ;; Show time
    (setq display-time-24hr-format t)
    (setq display-time-day-and-date t)
#+END_SRC
** Lines
#+BEGIN_SRC emacs-lisp
;;  conflict with polymode
;;  (global-linum-mode 1)  ; turn on display line numbers in margin but make emacs slow.
  (global-hl-line-mode 1) ; turn on highlighting current line
  ;;(setq linum-format "%5d ") ;; Width of linum
#+END_SRC
** Word Count
#+BEGIN_SRC emacs-lisp
(defun wc () (interactive) (shell-command (concat "wc " buffer-file-name)))
(global-set-key "\C-cw" 'wc)
 (defun count-word (start end)
    "Print number of words in the region."
    (interactive "r")
    (save-excursion
      (save-restriction
        (narrow-to-region start end)
        (goto-char (point-min))
        (count-matches "\\sw+"))))
(defalias 'word-count 'count-word)


#+END_SRC
** Font
#+BEGIN_SRC emacs-lisp
;;(set-face-attribute 'default nil :family "Consolas" :height 104)
#+END_SRC

** Window 
#+BEGIN_SRC emacs-lisp
  ;;(setq pop-up-frames t) ;; each file opens in a new window
  ;;popwin.el and e2wm.el  
  (auto-image-file-mode)
  (setq uniquify-buffer-name-style 'forward)
  (auto-compression-mode 1)
;;SPLIT VERTIVALLY
(setq split-width-threshold 0
     split-height-threshold nil)
#+END_SRC
