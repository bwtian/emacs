#+TITLE:auctex 
#+AUTHOR: Bingwei TIAN
#+EMAIL: bwtian@gmail.com
#+OPTIONS: toc:nil num:nil 
#+STARTUP: overview
#+CREATED: [2014-06-03 Tue 11:09]  
#+LASTEDIT:  
#+CATEGORIES: Org-babel for Emacs init
#+TODO: TODO FIXIT NEXT | SUB DONE SOMEDAY CANCEL 
http://www.emacswiki.org/emacs/AUCTeX
* e21_texMinor.org
** SUB [[file:e22_reftex.org][Reftex]]
** DONE Company and auto-complete
Auto Completion and Auto Save ;; http://www.emacswiki.org/emacs/AUCTeX
#+BEGIN_SRC emacs-lisp
  (require 'company-auctex)
  (company-auctex-init)
  (require 'auto-complete-auctex)
  (add-hook 'LaTeX-mode-hook 'company-auctex)
  (add-hook 'LaTeX-mode-hook 'auto-complete-auctex)
#+END_SRC 
** DONE CDLatex
#+BEGIN_SRC emacs-lisp
  (require 'cdlatex)
  (add-hook 'LaTeX-mode-hook 'turn-on-cdlatex)

#+END_SRC
** DONE PDFLaTex
#+BEGIN_SRC emacs-lisp
 (setq TeX-PDF-mode t)
;(require 'tex)
;(TeX-global-PDF-mode t)
#+END_SRC
** FIXIT Hooks
#+BEGIN_SRC emacs-lisp
  (add-hook 'LaTeX-mode-hook 'visual-line-mode)
  (add-hook 'LaTeX-mode-hook 'longlines-mode)
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)
  (add-hook 'LaTeX-mode-hook 'flycheck-mode)
  (add-hook 'LaTeX-mode-hook 'linum-mode)
  (add-hook 'LaTeX-mode-hook 'folding-mode)
  (add-hook 'LaTeX-mode-hook 'font-lock-mode)
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
#+END_SRC

** DONE Highlighting magic-latex-buffer
#+BEGIN_SRC emacs-lisp
(require 'magic-latex-buffer)
(add-hook 'LaTex-mode-hook 'magic-latex-buffer)

#+END_SRC

** TODO TeX-texify
;;; http://www.emacswiki.org/emacs/TN

(require 'tex-buf)
(defun TeX-command-default (name)
  "Next TeX command to use. Most of the code is stolen from `TeX-command-query'."
  (cond ((if (string-equal name TeX-region)
             (TeX-check-files (concat name "." (TeX-output-extension))
                              (list name)
                              TeX-file-extensions)
           (TeX-save-document (TeX-master-file)))
         TeX-command-default)
        ((and (memq major-mode '(doctex-mode latex-mode))
              (TeX-check-files (concat name ".bbl")
                               (mapcar 'car
                                       (LaTeX-bibliography-list))
                               BibTeX-file-extensions))
         ;; We should check for bst files here as well.
         TeX-command-BibTeX)
        ((TeX-process-get-variable name
                                   'TeX-command-next
                                   TeX-command-Show))
        (TeX-command-Show)))

;;;  from wiki
(defcustom TeX-texify-Show t
  "Start view-command at end of TeX-texify?"
  :type 'boolean
  :group 'TeX-command)

(defcustom TeX-texify-max-runs-same-command 5
  "Maximal run number of the same command"
  :type 'integer
  :group 'TeX-command)

(defun TeX-texify-sentinel (&optional proc sentinel)
  "Non-interactive! Call the standard-sentinel of the current LaTeX-process.
If there is still something left do do start the next latex-command."
  (set-buffer (process-buffer proc))
  (funcall TeX-texify-sentinel proc sentinel)
  (let ((case-fold-search nil))
    (when (string-match "\\(finished\\|exited\\)" sentinel)
      (set-buffer TeX-command-buffer)
      (unless (plist-get TeX-error-report-switches (intern (TeX-master-file)))
        (TeX-texify)))))

(defun TeX-texify ()
  "Get everything done."
  (interactive)
  (let ((nextCmd (TeX-command-default (TeX-master-file)))
        proc)
    (if (and (null TeX-texify-Show)
             (equal nextCmd TeX-command-Show))
        (when  (called-interactively-p 'any)
          (message "TeX-texify: Nothing to be done."))
      (TeX-command nextCmd 'TeX-master-file)
      (when (or (called-interactively-p 'any)
                (null (boundp 'TeX-texify-count-same-command))
                (null (boundp 'TeX-texify-last-command))
                (null (equal nextCmd TeX-texify-last-command)))
        (mapc 'make-local-variable '(TeX-texify-sentinel TeX-texify-count-same-command TeX-texify-last-command))
        (setq TeX-texify-count-same-command 1))
      (if (>= TeX-texify-count-same-command TeX-texify-max-runs-same-command)
          (message "TeX-texify: Did %S already %d times. Don't want to do it anymore." TeX-texify-last-command TeX-texify-count-same-command)
        (setq TeX-texify-count-same-command (1+ TeX-texify-count-same-command))
        (setq TeX-texify-last-command nextCmd)
        (and (null (equal nextCmd TeX-command-Show))
             (setq proc (get-buffer-process (current-buffer)))
             (setq TeX-texify-sentinel (process-sentinel proc))
             (set-process-sentinel proc 'TeX-texify-sentinel))))))

(add-hook 'LaTeX-mode-hook
         '(lambda ()
            (define-key LaTeX-mode-map (kbd <"C-c C-a">) 'TeX-texify)))

** TODO Prettify Math in Buffers
#+source: latex-pretty-symbols 
#+BEGIN_SRC emacs-lisp
  ;;(require 'latex-pretty-symbols)
#+END_SRC
** NEXT preview 
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    (setq TeX-view-program-list
          '(("SumatraPDF" "SumatraPDF.exe %o") ;;Windows
            ("Gsview" "gsview32.exe %o")
            ("Okular" "okular --unique %o")
            ("Evince" "evince %o")    ;; Gnomeers
            ("Firefox" "firefox %o")))
    (cond
     ((eq system-type 'windows-nt)
      (add-hook 'LaTeX-mode-hook
                (lambda ()
                  (setq TeX-view-program-selection '((output-pdf "SumatraPDF")
                                                     (output-dvi "Yap"))))))
     ((eq system-type 'gnu/linux)
      (add-hook 'LaTeX-mode-hook
                (lambda ()
                  (setq TeX-view-program-selection '((output-pdf "Okular")
                                                     (output-dvi "Okular")))))))

    (setq TeX-output-view-style (quote (
                                        ("^pdf$" "." "evince %o")
                                        ("^ps$" "." "gv %o")
                                        ("^dvi$" "." "xdvi %o")
                                        )))
    (setq tex-dvi-view-command "xdvi")
    (setq tex-dvi-print-command "dvips")
    (setq tex-alt-dvi-print-command "dvips")
** TODO Whizzy Preview: Toggle the preview window on/off with F9
+BEGIN_SRC emacs-lisp
  ;; sudo apt-get install whizzytex
  (autoload 'whizzytex-mode "whizzytex" "WhizzyTeX, a minor-mode WYSIWIG environment for LaTeX" t)
  (setq my-toggle-whizzy-count 0)
  (defun my-toggle-whizzy-mode ()
    (interactive)
    (if (= (mod my-toggle-whizzy-count 2) 0)
        (progn
          (whizzytex-mode)
          (message "WhizzyTeX on"))
      (progn
        (whizzy-mode-off)
        (kill-buffer (concat "*" (buffer-name) "*"))
        (message "WhizzyTeX off")))
    (setq my-toggle-whizzy-count (+ my-toggle-whizzy-count 1)))
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (define-key LaTeX-mode-map (kbd "<f9>") 'my-toggle-whizzy-mode)))
  ;; (setq LaTeX-default-options '("a4"))
  ;; (setq LaTeX-float "hbt")
  ;; (setq LaTeX-indent-level 2)
  ;; (setq LaTeX-item-indent 0)
  ;; (setq LaTeX-brace-indent-level 2)
  ;; ;;
  ;; (add-hook 'tex-mode-hook
  ;;        (function
  ;;         (lambda ()
  ;;           (font-lock-mode 1))))
  ;; ;;
  ;; (add-hook 'LaTeX-mode-hook
  ;;        (function
  ;;         (lambda ()
  ;;           (run-hooks 'tex-mode-hook))))

  ;; (setq TeX-open-quote "<<")
  ;; (setq TeX-close-quote ">>")
  ;; (setq TeX-insert-braces nil)
  ;; (setq preview-scale-function 1.3)
  ;; (setq LaTeX-math-menu-unicode t)
  ;; (require 'ac-math) ;; Latex Completion
  ;; (add-to-list 'ac-modes 'latex-mode)   ; make auto-complete aware of {{{latex-mode}}}
  ;; (defun ac-latex-mode-setup ()         ; add ac-sources to default ac-sources
  ;;   (setq ac-sources
  ;;      (append '(ac-source-math-unicode ac-source-math-latex ac-source-latex-commands)
  ;;                ac-sources)))
  ;; (add-hook 'latex-mode-hook 'ac-latex-mode-setup)
  ;; (ac-flyspell-workaround)
+END_SRC

** Note
;;; "LaTeX+DVI+PS+PDF+PDFViewer" routine
(setq my-tex-commands-extra (list 
                            (list "Custom Compile" "latex -interaction=nonstopmode -output-directory=../Outputs/ %s.tex && cd ../Outputs && bibtex %s.aux && cd ../TeX && latex -interaction=nonstopmode -output-directory=../Outputs/ %s.tex && latex -interaction=nonstopmode -output-directory=../Outputs/ %s.tex && mv ../Outputs/%s.dvi ../DVI/%s.dvi && dvips ../DVI/%s.dvi -o ../PS/%s.ps && ps2pdf ../PS/%s.ps ../PDF/%s.pdf && evince ../PDF/%s.pdf" 'TeX-run-command nil t)))
(require 'tex) 
(setq TeX-command-list (append TeX-command-list my-tex-commands-extra))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                    AUCTeX的用法                         ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

C-c C-c         系列命令，如下
  latex         编译
  view         一般编译一次或两次以后会自动转换到这个格式
  file         dvips
  print         view ps
  index         makeidx
  bibtex     bibtex

C-c C-r         对区域操作，可以选中一个区域
         latex，然后再重复命令看输出

C-c ~             进入latex-math-mode，进入后可以使用缩写
    `         左上角的`，例如`a生成\alpha{}

C-c C-e         LaTeX-environment，加入各种环境

C-c C-m         加入macro，如\frac,\ref等等很多，也可以用
C-c RET

\         TeX-electric-escap，这个命令需要在.emamcs里声明
         (setq  TeX-electric-escape t)，以后在输入'\'后
        会直接进入macro状态，相当于C-c C-m，唯一不同的就是
        SPC相当于完成并退出。



C-c C-s         加入章节,LaTeX-section,可以有一些参数，
        如toc在目录里生成标题的简称， 不过一般不加也可以。
         (setq LaTeX-section-hook
             '(LaTeX-section-heading
               LaTeX-section-title
               LaTeX-section-toc
               LaTeX-section-section
               LaTeX-section-label))



C-c (         生成label，可以根据上下文自动加上key

C-c )         生成ref，并自动带上括号，有几个选项
  SPC         所有的选项
  e         equation align等
  f         figure等
  i         enumerate
  t         table
  s         section

C-c =         生成目录

C-c {            生成括号对，光标移到第一个括号前

C-c ]            补全命令,\end{}

M-RET         自动加入item，bibitem等

M-q              AUC TeX 里选择字体

$的自动补全     例如输入$$x$后，会自动补全剩下的$

C-c &            在Ref环境中，当光标停在一个
                 \ref,\label,\index,\cite,\bibitem
                 括号中的内容时，自动显示源（目标）文件

C-c ;         注释掉一行

C-c %         注释掉一段

C-c '            同上，（引号下边那个点）

C-c `            看编译结果中的错误（键盘左上角）
C-c C-s  插入章节 

C-c C-e  插入 LaTex 环境 

C-c C-j  插入列表 item 

C-c ]  闭合 LaTeX 环境 

C-c C-m  插入 Tex 宏 

快速更改字体

auctex 也提供了一系列方便的快捷键用以方便的插入指定应该文本如何格式化的命
令，这系列命令一致以 'C-c C-f' 为前缀，以 'C- ' 结尾告诉 auctex 你具体需
要如何排版文本。

C-c C-f C-b  插入粗体文本 

C-c C-f C-i  插入斜体文本 

C-c C-f C-e  插入强调文本 

C-c C-f C-s  插入微斜体文本 

C-c C-f C-r  插入罗马体文本 

C-c C-f C-f  插入无衬线体文本 

C-c C-f C-t  插入打印机体字体 

C-c C-f C-c  插入小型大写文本 

C-c C-f C-d  删除字体信息 

