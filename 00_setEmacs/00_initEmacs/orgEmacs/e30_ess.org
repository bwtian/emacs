* e30_ess.org
#+BEGIN_SRC emacs-lisp
  (require 'ess-site)  ;; Load ESS from ELPA to Highlight R and Auto-complte
  (setq ess-eval-visibly nil) ; ESS will not print the evaluated comands, also speeds up the evaluation
  (setq ess-ask-for-ess-directory nil) ;; Dont ask each time when start an interactive R session 
  
#+END_SRC
** iESS Mode: ESS-comint Mode
Auto-scrolling of R console to bottom and Shift key extension
#+BEGIN_SRC emacs-lisp
(setq ansi-color-for-comint-mode 'filter)
(setq comint-prompt-read-only t)
(setq comint-scroll-to-bottom-on-input t)
(setq comint-scroll-to-bottom-on-output t)
(setq comint-move-point-for-output t)
;; (setq ess-eval-visibly-p t)      ; slow
(setq ess-eval-visibly-p nil)   ; fast ;; Must-haves for ESS
;; It causes commands to be invisible, and leaves junk like + + + > > >
#+END_SRC
** ESS Auto complete:: DEFAULT > 12.09
** ESS Code indentation 
;; http://ess.r-project.org/Manual/ess.html#Indenting
;; https://svn.r-project.org/ESS/trunk/lisp/ess-custom.el
;; ESS provides: DEFAULT, OWN, GNU, BSD, K&R, C++, RRR, CLB.
;;                                 DEF GNU BSD K&R C++ RRR CLB
;; ess-indent-level                  2   2   8   5   4   4   2
;; ess-continued-statement-offset    2   2   8   5   4   4   4
;; ess-brace-offset                  0   0  -8  -5  -4   0   0
;; ess-arg-function-offset           2   4   0   0   0   4   0
;; ess-expression-offset             4   2   8   5   4   4   4
;; ess-else-offset                   0   0   0   0   0   0   0
;; ess-close-brace-offset            0   0   0   0   0   0   2
;;(setq ess-default-style 'C++) ; Vincent's recommendation
#+BEGIN_SRC emacs-lisp
(setq ess-default-style 'BSD)   ; Common R chosen
#+END_SRC

** Ess eldoc
#+BEGIN_SRC emacs-lisp
(require 'ess-eldoc)
(setq ess-eval-visibly-p nil) 
#+END_SRC

** ESS Code fold
In order to enable Emacsâ€™ standard OutlineMode for .R files:
#+BEGIN_SRC emacs-lisp
  (add-hook 'ess-mode-hook
          '(lambda ()
             (outline-minor-mode)
             (setq outline-regexp "\\(^#\\{4,5\\} \\)\\|\\(^[a-zA-Z0-9_\.]+ ?<-?function(.*{\\)")
             (defun outline-level ()
               (cond ((looking-at "^##### ") 1)
                 ((looking-at "^#### ") 2)
                 ((looking-at "^[a-zA-Z0-9_\.]+ ?<- ?function(.*{") 3)
                 (t 1000)))
             ))
  (add-hook 'ess-mode-hook
            '(lambda() (yafolding-mode)))
#+END_SRC

** ESS Tracebug: A debugger for your code
#+BEGIN_SRC emacs-lisp
(require 'ess-tracebug)    ;; http://code.google.com/p/ess-tracebug/
(setq ess-use-tracebug t)                    ; permanent activation
; ;(setq ess-tracebug-prefix "\M-t")               ; activate with M-t
(add-hook 'ess-post-run-hook 'ess-tracebug t)
#+END_SRC
** ESS Underscore  preservation
;; http://www.r-bloggers.com/a-small-customization-of-ess/
(ess-toggle-underscore nil) ;; leave my underscore key alone!
#+BEGIN_SRC emacs-lisp
(require 'ess-smart-underscore)  ;;elpa
(setq ess-S-assign-key (kbd "C-="))
(ess-toggle-S-assign-key t)     ; enable above key definition
#+END_SRC
** ESS Key-Bindings
#+BEGIN_SRC emacs-lisp
  ;; ESS Mode (.R file)
    (define-key ess-mode-map "\C-l" 'ess-eval-line-and-step)
    (define-key ess-mode-map "\C-p" 'ess-eval-function-or-paragraph-and-step)
    (define-key ess-mode-map "\C-r" 'ess-eval-region)

  ;; iESS Mode (R console)
    (define-key inferior-ess-mode-map "\C-u" 'comint-kill-input)
    (define-key inferior-ess-mode-map "\C-w" 'backward-kill-word)
    (define-key inferior-ess-mode-map "\C-a" 'comint-bol)
    (define-key inferior-ess-mode-map [home] 'comint-bol)

  ;; Comint Mode (R console as well)
    (define-key comint-mode-map "\C-e" 'comint-show-maximum-output)
    (define-key comint-mode-map "\C-r" 'comint-show-output)
    (define-key comint-mode-map "\C-o" 'comint-kill-output)

  ;;Tracing bug
    (define-key ess-mode-map "\M-]" 'next-error)
    (define-key ess-mode-map "\M-[" 'previous-error)
    (define-key inferior-ess-mode-map "\M-]" 'next-error-no-select)
    (define-key inferior-ess-mode-map "\M-[" 'previous-error-no-select)
    (define-key compilation-minor-mode-map [(?n)] 'next-error-no-select)
    (define-key compilation-minor-mode-map [(?p)] 'previous-error-no-select)
#+END_SRC
** ESS Font-lock
#+BEGIN_SRC emacs-lisp
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(ess-R-font-lock-keywords (quote ((ess-R-fl-keyword:modifiers . t)
                                      (ess-R-fl-keyword:fun-defs . t)
                                      (ess-R-fl-keyword:keywords . t)
                                      (ess-R-fl-keyword:assign-ops . t)
                                      (ess-R-fl-keyword:constants . t)
                                      (ess-fl-keyword:fun-calls . t)
                                      (ess-fl-keyword:numbers . t)
                                      (ess-fl-keyword:operators . t)
                                      (ess-fl-keyword:delimiters . t)
                                      (ess-fl-keyword:= . t)
                                      (ess-R-fl-keyword:F&T . t)))))
#+END_SRC
** ESS rdired 
#+BEGIN_SRC emacs-lisp
(autoload 'ess-rdired "ess-rdired" 
  "View *R* objects in a dired-like buffer." t)
#+END_SRC
** ESS Sweave
#+BEGIN_SRC emacs-lisp
;; Lets you do 'C-c C-c Sweave' from your Rnw file
(defun emacsmate-add-Sweave ()
  (add-to-list 'TeX-command-list
           '("Sweave" "R CMD Sweave %s"
         TeX-run-command nil (latex-mode) :help "Run Sweave") t)
  (add-to-list 'TeX-command-list
           '("LatexSweave" "%l %(mode) %s"
         TeX-run-TeX nil (latex-mode) :help "Run Latex after Sweave") t)
  (setq TeX-command-default "Sweave"))

(add-hook 'Rnw-mode-hook 'emacsmate-add-Sweave)
#+END_SRC

