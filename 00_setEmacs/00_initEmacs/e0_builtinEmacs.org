* coreEmacs
#+BEGIN_SRC emacs-lisp
   ;; Set default workspace
   (setq default-directory "~/Dropbox/")
  ;; Language.
   (set-language-environment 'English)
   (set-buffer-file-coding-system 'utf-8)
   (prefer-coding-system 'utf-8)
   (set-language-environment  'utf-8)
   (prefer-coding-system 'utf-8)
   (setq locale-coding-system 'utf-8)
   (set-default-coding-systems 'utf-8)
   (set-file-name-coding-system 'utf-8)
   (set-keyboard-coding-system 'utf-8)
   (set-clipboard-coding-system 'utf-8)
   (set-terminal-coding-system 'utf-8)
   (setq coding-system-for-read 'utf-8)
   (setq coding-system-for-write 'utf-8)
   ;;(set-default-buffer-file-coding-system 'utf-8)
   ;;(set-buffer-file-coding-system-for-write 'utf-8)
  
  
  
   ;;(setq initial-frame-alist '((top . 10) (left . 10) (width . 80) (height . 40)))
   ;;(setq initial-frame-alist (quote ((fullscreen . maximized))))
   (setq default-frame-alist
          '((background-color . "DarkSlateGray") ;;Colors:black,darkblue,abc88b,DarkSlateGray,#171717
           (foreground-color  . "Wheat") ;;Colors:white,grey85,Wheat,#c0c0c0,
           (mouse-color       . "green")  ;;Colors:blue,steelblue,gold1
           (cursor-color      . "green"))) ;;Colors:green.red,white,gold2
   ;; (setq default-frame-alist
   ;;       (append (list
   ;;                '(alpha . (90 90)) ;; 90,85
   ;;                ) default-frame-alist))
  
  
   ;; =========================
   ;; 0.0 Version Contorl
   ;; =========================
   (setq backup-by-copying t) ;automatically backup
   ;; place all auto-saves and backups in the directory pointed to by temporary-file-directory
   ;; (e.g., /tmp; C:/Temp/ on Windows).
   (setq backup-directory-alist
         `((".*" . ,temporary-file-directory)))
   (setq auto-save-file-name-transforms
         `((".*" ,temporary-file-directory t)))
   (setq kept-new-versions 5) ;Keep 6 newest Bankup files
   (setq kept-old-versions 2) ;Keep 3 oldest Bankup files
   (setq delete-old-versions t) ;Delete old versions
   (setq version-control t) ; Multitime backup
   (setq kill-ring-max 200)
   (setq delete-auto-save-files t) ; Delete Auto-save file When quit
   (setq x-select-enable-clipboard t) ;; enable Copy from outside
   (setq make-backup-files nil) ; stop creating those backup~ files
   (setq auto-save-default nil) ; stop creating those #autosave# files
   (recentf-mode 1) ; keep a list of recently opened files
   ;; ==========================
   ;; 0.0 Make pair of {,[ and (
   ;; ==========================
   (setq skeleton-pair t) ;; Skeleton library provides pair insertion via the skeleton-insert-maybe
   (setq skeleton-pair-on-word t)
   (electric-pair-mode t)
   (global-set-key "("  'skeleton-pair-insert-maybe)
   ;;(global-set-key "<"  'skeleton-pair-insert-maybe)
   (global-set-key "["  'skeleton-pair-insert-maybe)
   (global-set-key "{"  'skeleton-pair-insert-maybe)
   (global-set-key "\"" 'skeleton-pair-insert-maybe)
   (global-set-key "\%" 'skeleton-pair-insert-maybe)
   (global-set-key "\;" 'skeleton-pair-insert-maybe)
   (global-set-key "\'" 'skeleton-pair-insert-maybe)
   (global-set-key "\`" 'skeleton-pair-insert-maybe)
   ;;(global-set-key "\:" 'skeleton-pair-insert-maybe)
   ;; Show highlight as under line :Other Highlight Parentheses mode
   (setq show-paren-delay 0)           ; how long to wait? ;; default was o.15s
   (show-paren-mode t)                 ; turn paren-mode on match highlighting
   (setq show-paren-style  'expression) ; highlight entire bracket expression alternatives are 'parenthesis' and 'mixed'
   (set-face-foreground    'show-paren-mismatch-face "red")
   (set-face-background    'show-paren-match-face nil) ;; for colors change nil to color
   (set-face-foreground    'show-paren-match-face nil)
   (set-face-attribute     'show-paren-match-face nil
                       ;;:background nil :foreground nil
                       :underline nil :weight 'extra-bold :overline nil :slant 'normal) ;; #ffff00
   ;; ==============================
   ;; 0.0  Coment or Uncoment
   ;; ==============================
   (global-set-key (kbd "C-c c") 'comment-region)   ;; make C-c C-c and C-c C-u work
   (global-set-key (kbd "C-c u") 'uncomment-region) ;; for comment/uncomment region in all modes
   (global-set-key "\M-g" 'goto-line)
   ;; =========================
   ;; 0.0 Bars and Displays
   ;; =========================
   ;; Start Message
   (setq inhibit-startup-message t)  ;; nil=show, do not show log
   ;; Title Bar
   (setq frame-title-format "emacs@%b %f") ;; Show buffer name in Title bar
   ;; Menu Bar
   (menu-bar-mode t) ;; show menubar
   ;; Tool Bar
   (tool-bar-mode 0) ;; 1 to show toolbar
   ;; Scroll Bar
   (set-scroll-bar-mode t) ;;'right
   ;; Lines
   (global-linum-mode 1)  ; turn on display line numbers in margin.
   ;;(global-hl-line-mode 1) ; turn on highlighting current line
   ;; Wrap-mode: soft Warp at word boundary
   (global-visual-line-mode 1) ;; Make lines soft wrapped at word boundary
   ;;(setq default-truncate-lines t) ;;Make lines NOT soft-wrap and short lines
   ;; make side by side buffers function the same as the main window
   ;; (setq truncate-partial-width-windows nil)  ;; for vertically-split windows
   ;; (global-set-key (kbd "C-c C-l") 'toggle-truncate-lines)
   ;; (add-hook 'dired-mode-hook (lambda () (setq truncate-lines t)))
   ;; (add-hook 'diff-mode-hook (lambda () (setq truncate-lines t)))
   ;; Sentence
   (setq sentence-end-double-space nil) ; end with a dot, not with two spaces;
   ;; Auto Fill
   (global-visual-line-mode 1) ;; Make lines soft wrapped at word boundary
   ;;set-default 'truncate-lines t) ;;Make lines NOT soft-wrap
  
   ;; Mode line Bar == Status Bar
   (setq size-indication-mode t)
   (setq line-number-mode t) ;; Line number on mode-line bar
   (setq column-number-mode t) ;; Column number on mode-line bar
   (display-time-mode 1) ;; Show time
   (setq display-time-24hr-format t)
   (setq display-time-day-and-date t)
   (setq display-battery-mode t)
  
   ;; =========================
   ;; 0.0 Minibuffer
   ;; =========================
   (defalias 'yes-or-no-p 'y-or-n-p) ;; Treat 'y' as yes, 'n' as no
   (setq enable-recursive-minibuffers t) ;; nil
   (icomplete-mode 1)
   (setq resize-mini-windows t) ;; t for autosize nil for not
   ;; Ido: interactively do things with buffers and files
   (ido-mode t)
  
   ;; don't let the cursor go into minibuffer prompt
   (setq minibuffer-prompt-properties (quote (read-only t point-entered
                                                        minibuffer-avoid-prompt
                                                        face
                                                        minibuffer-prompt)))
   ;; Rename Buffer with C-c r
   (defun rename-file-and-buffer ()
   "Rename the current buffer and file it is visiting."
   (interactive)
   (let ((filename (buffer-file-name)))
     (if (not (and filename (file-exists-p filename)))
         (message "Buffer is not visiting a file!")
       (let ((new-name (read-file-name "New name: " filename)))
         (cond
          ((vc-backend filename) (vc-rename-file filename new-name))
          (t
           (rename-file filename new-name t)
           (set-visited-file-name new-name t t)))))))
   (global-set-key (kbd "C-c r")  'rename-file-and-buffer)
   
  
   ;; Window
   ;;(setq pop-up-frames t) ;; each file opens in a new window
   ;;popwin.el and e2wm.el
   (auto-image-file-mode)
   (setq uniquify-buffer-name-style 'forward)
   (auto-compression-mode 1)
   (setq Man-notify-method 'pushy)
   ;;(setq default-abbrev-mode t)
   ;; eldoc mode for minibuffer helper
    (eldoc-mode 1)
    (setq ess-eldoc-show-on-symbol nil) ;; not just in the ()
    (setq ess-eldoc-abbreviation-style 'aggressive)
#+END_SRC
* orgMode
: http://doc.norang.ca/org-mode.html
#+CATEGORY: ORG-MODE 
  :PROPERTIES:
  :CUSTOM_ID: 10
  :MODE: MAIN
  :END:
** Org-Global
#+BEGIN_SRC emacs-lisp
  ;; ##############################################################################
  ;; Org-mode:Note,TODO,Plan,GTD,Babel,.emacs
  ;; ##############################################################################
 ;; (require 'org-install)
  ;; OS type
    ;; (add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\|todo\\|note)\\'"
  ;; . org-mode))
  (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
  (add-to-list 'auto-mode-alist '("\\.org_archive\\'" . org-mode))
  (add-to-list 'auto-mode-alist '("\\.txt\\'" . org-mode))
  (add-to-list 'auto-mode-alist '("\\.todo\\'" . org-mode))
  (add-to-list 'auto-mode-alist '("\\.note\\'" . org-mode))
  (setq default-major-mode 'org-mode) ; for no suffix file
  ;; Turn on Headline indent without many stars
  (setq org-startup-indented nil) ;nil for show stars; t for intedent
  ;; Enable abbrev-mode
  (add-hook 'org-mode-hook (lambda () (abbrev-mode 1)))
  (add-hook 'org-mode-hook 'turn-on-font-lock)    ; Org buffers only
  ;;Standard key bindings
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)
  ;;(global-set-key "\C-cc" 'org-capture)
  (add-hook 'org-mode-hook 'turn-on-font-lock)
  (add-hook 'org-mode-hook (lambda () (setq truncate-lines nil)))
#+END_SRC

** Org-GTD <2013-12-02 Mon>
*** GTD Agenda Files
gtd.org file for Examples
#+BEGIN_EXAMPLE
   * Research
   #+CATEGORY: Research
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
(setq org-agenda-files
      '(
        "~/Dropbox/org/research.org"
        "~/Dropbox/org/coursera.org"
        "~/Dropbox/org/job.org"
        "~/Dropbox/org/home.org"
        "~/Dropbox/org/reading.org"
        "~/Dropbox/org/org-ical.org"
        "~/Dropbox/org/next.org"
        "~/Dropbox/org/birthday.org"
        "~/Dropbox/org/someday.org"))


#+END_SRC

*** Todo Keywords
#+BEGIN_EXAMPLE
#+TODO: TODO(t) WAIT(w) | DONE(d) SOMEDAY(s) CANCEL(c)
#+TODO: TODO(t!) WAIT(w!) | DONE(d!) SOMEDAY(s!) CANCEL(c!) # with time stamps
#+END_EXAMPLE
#+BEGIN_SRC emacs-lisp
;;default todo keywords
(setq org-todo-keywords
      '((sequence "TODO(t)" "DOING(i)" "WAIT(w)" "|" "DONE(d)" "SOMEDAY(s)"  "CANCEL(c)")))
#+END_SRC
*** Todo Tags
#+BEGIN_EXAMPLE
#+TAGS: @OFFICE(o) @HOME(h)
#+TAGS: SHOPPING(s) MAIL(m) PROJECT(p)
#+TAGS: OFFICE(o) RESEARCH(r) DIARY(d) BOOK(b) FILMS(f) IDEA(i) WEB(w) COMPUTER(c)
#+END_EXAMPLE
#+BEGIN_SRC emacs-lisp
(setq org-tag-alist
  '(("@OFFICE" . ?o) ("@HOME" . ?h) ("@Transport" . ?t)
    ("MAIL" . ?m) ("PROJECT" . ?p)))
#+END_SRC

*** Time Stamps
#+BEGIN_SRC emacs-lisp
;; add time stamps to completed TODO items
(setq org-log-done t) ;; nil for no close info
#+END_SRC

*** Percentage [/] [%]

# *** Calendar Org

# #+BEGIN_SRC emacs-lisp
# '(calendar-week-start-day 1)
#  '(case-fold-search t)
#  '(org-agenda-files (quote ("~/org/birthday.org" "~/org/gtd.org")))
#  '(org-agenda-ndays 7)
#  '(org-agenda-repeating-timestamp-show-all nil)
#  '(org-agenda-restore-windows-after-quit t)
#  '(org-agenda-show-all-dates t)
#  '(org-agenda-skip-deadline-if-done t)
#  '(org-agenda-skip-scheduled-if-done t)
#  '(org-agenda-sorting-strategy (quote ((agenda time-up priority-down tag-up) (todo tag-up))))
#  '(org-agenda-start-on-weekday nil)
# ;;  '(org-agenda-todo-ignore-deadlines t)
# ;;  '(org-agenda-todo-ignore-scheduled t)
# ;;  '(org-agenda-todo-ignore-with-date t)
#  '(org-agenda-window-setup (quote other-window))
#  '(org-deadline-warning-days 7)
#  '(org-export-html-style "<link rel=\"stylesheet\" type=\"text/css\" href=\"mystyles.css\">")
#  '(org-fast-tag-selection-single-key nil)
#  '(org-log-done (quote (done)))
#  '(org-refile-targets (quote (("gtd.org" :maxlevel . 1) ("someday.org" :level . 1))))
#  '(org-reverse-note-order nil)
#  '(org-tags-column -78)
#  '(org-tags-match-list-sublevels nil)
#  '(org-time-stamp-rounding-minutes 5)
#  '(org-use-fast-todo-selection t)
#  '(org-use-tag-inheritance nil)
#  '(unify-8859-on-encoding-mode t nil (ucs-tables)))

# ;; These lines only if org-mode is not part of the X/Emacs distribution.
# (autoload 'org-mode "org" "Org mode" t)
# (autoload 'org-diary "org" "Diary entries from Org mode")
# (autoload 'org-agenda "org" "Multi-file agenda from Org mode" t)
# (autoload 'org-store-link "org" "Store a link to the current location" t)
# (autoload 'orgtbl-mode "org" "Org tables as a minor mode" t)
# (autoload 'turn-on-orgtbl "org" "Org tables as a minor mode")


# ;(setq org-log-done nil)
# (setq org-log-done t)
# (setq org-agenda-include-diary nil)
# (setq org-deadline-warning-days 7)
# (setq org-timeline-show-empty-dates t)
# (setq org-insert-mode-line-in-empty-file t)

# (require 'org-install)

# (autoload 'remember "remember" nil t)
# (autoload 'remember-region "remember" nil t)

# (setq org-directory "~/org/")
# (setq org-default-notes-file "~/org/notes.org")
# (setq remember-annotation-functions '(org-remember-annotation))
# (setq remember-handler-functions '(org-remember-handler))
# (add-hook 'remember-mode-hook 'org-remember-apply-template)
# (define-key global-map "\C-cr" 'org-remember)

# (setq org-remember-templates
#      '(
#       ("Todo" ?t "* TODO %^{やること} %^g\n%?\nAdded: %U" "~/org/gtd.org" "INBOX")
#       ("Note" ?n "\n* %U %^{トピックス} %^g \n%i%?\n %a" "~/org/notes.org")
#       ))

# (define-key global-map [f7] 'gtd)
# (define-key global-map [f8] 'remember)
# (define-key global-map [f9] 'remember-region)

# (setq org-agenda-exporter-settings
#       '((ps-number-of-columns 1)
#         (ps-landscape-mode t)
#         (htmlize-output-type 'css)))

# (setq org-agenda-custom-commands
# '(
#   ("p" "Projects"
#    ((tags "PROJECT")))
#   ("h" "Office and Home Lists"
#    ((agenda)
#     (tags-todo "OFFICE")
#     (tags-todo "HOME")
#     (tags-todo "WEB")
#     (tags-todo "CALL")
#     ))

#   ("d" "Daily Action List"
#    (
#     (agenda "" ((org-agenda-ndays 1)
# 		(org-agenda-sorting-strategy
# 		 (quote ((agenda time-up priority-down tag-up) )))
# 		(org-deadline-warning-days 0)
# 		))))))

# (setq org-todo-keywords '((sequence "TODO" "APPT" "STARTED" "DONE")))
# (defun gtd ()
#     (interactive)
#     (find-file "~/org/gtd.org"))
# (global-set-key (kbd "C-c g") 'gtd)

# (add-hook 'org-agenda-mode-hook 'hl-line-mode)
# #+END_SRC

# *** Sync Google
# : http://qiita.com/takaxp/items/0b717ad1d0488b74429d
# **** C-M-c Open org-ical.org (Optial)

# #+BEGIN_SRC emacs-lisp

# (defun show-org-buffer (file)
#     "Show an org-file on the current buffer"
#     (interactive)
#     (if (get-buffer file)
#         (let ((buffer (get-buffer file)))
#           (switch-to-buffer buffer)
#           (message "%s" file))
#      (find-file (concat "~/Dropbox/org/" file)))) 
# (global-set-key (kbd "C-M-c") '(lambda () (interactive)
#                                   (show-org-buffer "org-ical.org")))

# #+END_SRC
# **** 
# #+BEGIN_SRC emacs-lisp
# defvar org-capture-ical-file (concat org-directory "org-ical.org"))
#  ;; see org.pdf:p73
#  (setq org-capture-templates
#       `(("t" "TODO 項目を INBOX に貼り付ける" entry
#          (file+headline nil "INBOX") "** TODO %?\n\t")
#          ("c" "同期カレンダーにエントリー" entry
#           (file+headline ,org-capture-ical-file "Schedule")
#           "** TODO %?\n\t")))
# #+END_SRC

# #+BEGIN_SRC emacs-lisp
#  (setq org-refile-targets
#        (quote (("org-ical.org" :level . 1)
#                ("next.org" :level . 1)
#                ("sleep.org" :level . 1))))
# #+END_SRC
# #+BEGIN_SRC emacs-lisp
# (require 'org-icalendar)
# (defun my-org-export-icalendar ()
#   (interactive)
#   (org-export-icalendar nil "~/Dropbox/org/org-ical.org"))
# (define-key org-mode-map (kbd "C-c 1") 'my-org-export-icalendar)
# #+END_SRC
# #+BEGIN_SRC emacs-lisp
# ;; iCal の説明文
# (setq org-icalendar-combined-description "OrgModeのスケジュール出力")
# ;; カレンダーに適切なタイムゾーンを設定する（google 用には nil が必要）
# (setq org-icalendar-timezone "Asia/Tokyo")
# ;; DONE になった TODO は出力対象から除外する
# (setq org-icalendar-include-todo t)  
# ;; （通常は，<>--<> で区間付き予定をつくる．非改行入力で日付がNoteに入らない）
# (setq org-icalendar-use-scheduled '(event-if-todo))
# ;; DL 付きで終日予定にする：締め切り日（スタンプで時間を指定しないこと）
# (setq org-icalendar-use-deadline '(event-if-todo))
# #+END_SRC

# #+BEGIN_SRC emacs-lisp
# (add-hook 'org-after-save-iCalendar-file-hook
#           (lambda ()
#             (shell-command-to-string
#              "scp ~/Dropbox/org/org-ical.ics hoge:~/public_html/ical")
#             (message "Uploading ... [DONE]")))


# #+END_SRC
# #+BEGIN_SRC emacs-lisp
# (run-with-idle-timer 600 t 'reload-ical-export)
# (defun reload-ical-export ()
#   "Export org files as an iCal format file"
#   (interactive)
#   (when (string= major-mode 'org-mode)
#     (my-org-export-icalendar)))
# #+END_SRC
     

** Org-Babel
Org-babel Key-bindings
http://orgmode.org/worg/org-contrib/babel/index.html
Usage: <s TAB, C-c C-c, C-c ', C-c
s    #+BEGIN_SRC ... #+END_SRC
e    #+BEGIN_EXAMPLE ... #+END_EXAMPLE
q    #+BEGIN_QUOTE ... #+END_QUOTE
v    #+BEGIN_VERSE ... #+END_VERSE
c    #+BEGIN_CENTER ... #+END_CENTER
l    #+BEGIN_LaTeX ... #+END_LaTeX
L    #+LaTeX:
h    #+BEGIN_HTML ... #+END_HTML
H    #+HTML:
a    #+BEGIN_ASCII ... #+END_ASCII
A    #+ASCII:
i    #+INDEX: line
I    #+INCLUDE: line
:arg para. :results output :exports both :colnames yes
-n show code line number -r show Tag Reference
------------------------------------------------------
#+BEGIN_SRC emacs-lisp
;; ---------------------------------------------------
;; 3.1.3 Org-babel:active code in Org-mode
;; ---------------------------------------------------
;; http://orgmode.org/worg/org-contrib/babel/languages.html
;;(require 'org-install)
(require 'ob-tangle)
(require 'ob-clojure)
(org-babel-do-load-languages
'org-babel-load-languages
'(
(emacs-lisp  . t)
(sh          . t)
(R           . t)
(org         . t)
(latex       . t)
(python      . t)
(ruby        . t)
(perl        . t)
(js          . t)
(scheme      . t)
(C           . t)
(clojure     . t)
(lilypond    . t)
(octave      . t)
(ditaa       . t)
))
;;; Do not prompt to confirm evaluation
;;; This may be dangerous - make sure you understand the consequences
;;; of setting this -- see the docstring for details
(setq org-confirm-babel-evaluate nil)
(setq org-src-window-setup 'current-window) ;; After C-c '
(setq org-src-fontify-natively t) ;; syntax highlighting fontify code in code blocks
;; (setq org-export-htmlize-output-type 'css)


;; Face for Babel
;; (defface org-block-begin-line
;;   '((t (:underline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF")))
;;   "Face used for the line delimiting the begin of source blocks.")

;; (defface org-block-background
;;   '((t (:background "#FFFFEA")))
;;   "Face used for the source block background.")

;; (defface org-block-end-line
;;   '((t (:overline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF")))
;;   "Face used for the line delimiting the end of source blocks.")
;;Don't enable this because it breaks access to emacs from my Android phone
;;(setq org-startup-with-inline-images t)

;; R-babel set up for windows
(if (string-equal system-type "windows-nt")
(setq org-babel-R-command "C:/PROGRA~1/R/R-2.15.2/bin/x64/R --slave --no-save"))
#+END_SRC

#+RESULTS:

** Org-ShowImages
#+BEGIN_SRC emacs-lisp
;; -- Display images in org mode
;; enable image mode first
(iimage-mode)
;; add the org file link format to the iimage mode regex
(add-to-list 'iimage-mode-image-regex-alist
(cons (concat "\\[\\[file:\\(~?" iimage-mode-image-filename-regex "\\)\\]") 1))
;; add a hook so we can display images on load
(add-hook 'org-mode-hook '(lambda () (org-turn-on-iimage-in-org)))
;; function to setup images for display on load
(defun org-turn-on-iimage-in-org ()
"display images in your org file"
(interactive)
(turn-on-iimage-mode)
(set-face-underline-p 'org-link nil))
;; function to toggle images in a org bugger
(defun org-toggle-iimage-in-org ()
"display images in your org file"
(interactive)
(if (face-underline-p 'org-link)
(set-face-underline-p 'org-link nil)
(set-face-underline-p 'org-link t))
(call-interactively 'iimage-mode))
;; I have this function bound to C-l with a call like this:
;;(define-key org-mode-map (kbd "C-S-a") 'org-archive-subtree)

;; (add-to-list 'iimage-mode-image-regex-alist
;;              (cons (concat "\\[\\[file:\\(~?" iimage-mode-image-filename-regex
;;                            "\\)\\]")  1))

;; (defun org-toggle-iimage-in-org ()
;;   "display images in your org file"
;;   (interactive)
;;   (if (face-underline-p 'org-link)
;;       (set-face-underline-p 'org-link nil)
;;       (set-face-underline-p 'org-link t))
;;   (iimage-mode))

;; (add-hook 'org-mode-hook
;;           (lambda ()
;;             (local-set-key "\M-n" 'outline-next-visible-heading)
;;             (local-set-key "\M-p" 'outline-previous-visible-heading)
;;             ;; table
;;             (local-set-key "\C-\M-w" 'org-table-copy-region)
;;             (local-set-key "\C-\M-y" 'org-table-paste-rectangle)
;;             (local-set-key "\C-\M-l" 'org-table-sort-lines)
;;             ;; display images
;;             (local-set-key "\M-I" 'org-toggle-iimage-in-org)
;;             ;; fix tab
;;             (local-set-key "\C-y" 'yank)
;;             ;; yasnippet (allow yasnippet to do its thing in org files)
;;             (org-set-local 'yas/trigger-key [tab])
;;             (define-key yas/keymap [tab] 'yas/next-field-group)))
#+END_SRC


** Org-Evernote
#+BEGIN_SRC emacs-lisp
;;=======================================================
;; 3.2 evernote-mode: Note,TODO,Twitter
;;======================================================
;; sudo apt-get install ruby ;; install ruby
;; sudo ruby setup.rb ;; in evernote-mode folder

;; (setq evernote-ruby-command "/usr/bin/ruby")

;; (require 'evernote-mode)
;; (setq evernote-username "gistian@gmail.com")
;; (global-set-key "\C-cec" 'evernote-create-note)
;; (global-set-key "\C-ceo" 'evernote-open-note)
;; (global-set-key "\C-ces" 'evernote-search-notes)
;; (global-set-key "\C-ceS" 'evernote-do-saved-search)
;; (global-set-key "\C-cew" 'evernote-write-note)
;; (global-set-key "\C-cep" 'evernote-post-region)
;; (global-set-key "\C-ceb" 'evernote-browser)
;; (setq evernote-enml-formatter-command '("w3m" "-dump" "-I" "UTF8" "-O" "UTF8")) ; option4xhtml

#+END_SRC

** Org-Skeleton
#+BEGIN_SRC emacs-lisp
(define-skeleton org-skeleton
"Header info for a emacs-org file."
"Title: "
"#+TITLE:" str " \n"
"#+AUTHOR: Bingwei TIAN\n"
"#+EMAIL: bwtian@gmail.com\n"
"#+OPTIONS: toc:nil num:nil \n"
"#+STARTUP: showall \n"
"#+LICENSE:All Right Reserved Before [2015-12-31 Thu], After that GPLv3 \n"
"#+CREATED:  \n"
"#+LASTEDIT:  \n"
"#+CATEGORIES: Org-babel, R and R function file \n"
"#+DEPENDENCY:"  " \n"
"#+INPUT:"  " \n"
"#+TEST:"  " \n"
"#+OUTPUT:"  " \n"
"#+BEGIN_SRC R \n"
"#+END_SRC \n")
"#+STARTUP: hidestars"
(global-set-key [C-S-f4] 'org-skeleton)
;; C-c C-e t

(define-skeleton comment-skeleton
"Input #+BEGIN_COMMENT #+END_COMMENT in org-mode"
""
"#+BEGIN_COMMENT\n"
_"\n"
"#+END_COMMENT\n")
(global-set-key [C-ccc] 'comment-skeleton)

(define-skeleton comment-skeleton
"Input code blockers in org-mode"
""
"# ##############################################################################\n"
"# \n"
"# ##############################################################################\n")
(global-set-key [C-S-f5] 'comment-skeleton)

(define-skeleton comment2-skeleton
"Input code blockers in org-mode"
""
"# ==============================================================================\n"
"# \n"
"# ==============================================================================\n")
(global-set-key [C-S-f6] 'comment2-skeleton)

(define-skeleton comment3-skeleton
"Input code blockers in org-mode"
""
"# ------------------------------------------------------------------------------\n"
"# \n"
"# ------------------------------------------------------------------------------\n")
(global-set-key [C-S-f7] 'comment3-skeleton)


(define-skeleton comment4-skeleton
"Input code blockers in org-mode"
""
"# ..............................................................................\n"
"# \n"
"# ..............................................................................\n")
(global-set-key [C-S-f8] 'comment4-skeleton)

(define-skeleton R-skeleton
"Input R babel in org-mode"
""
"#+BEGIN_SRC R\n"
_"\n"
"#+END_SRC\n")
(global-set-key [C-S-f11] 'R-skeleton)


(define-skeleton emacs-lisp-skeleton
"Input Emacs-lisp babel in org-mode"
""
"#+BEGIN_SRC emacs-lisp\n"
_"\n"
"#+END_SRC\n")
(global-set-key [C-S-f12] 'emacs-lisp-skeleton)
#+END_SRC



** Org-Latex
: http://orgmode.org/worg/org-papers.html
: http://nakkaya.com/2010/09/07/writing-papers-using-org-mode/
: http://tincman.wordpress.com/2011/01/04/research-paper-management-with-emacs-org-mode-and-reftex/
: http://www-public.it-sudparis.eu/~berger_o/weblog/2012/03/23/how-to-manage-and-export-bibliographic-notesrefs-in-org-mode/
: http://www.mfasold.net/blog/2009/02/using-emacs-org-mode-to-draft-papers/
: http://article.gmane.org/gmane.emacs.orgmode/2406/match=bibliography
: http://www-public.telecom-sudparis.eu/~berger_o/weblog/2012/03/23/how-to-manage-and-export-bibliographic-notesrefs-in-org-mode/
: http://lists.gnu.org/archive/html/emacs-orgmode/2009-12/msg00589.html
*** RefTex: Manage Reference in Org-mode
#+BEGIN_SRC emacs-lisp
(defun org-mode-reftex-setup ()
  (load-library "reftex")
  (and (buffer-file-name) (file-exists-p (buffer-file-name))
       (progn
	 ;enable auto-revert-mode to update reftex when bibtex file changes on disk
	 (global-auto-revert-mode t)
	 (reftex-parse-all)
	 ;add a custom reftex cite format to insert links
	 (reftex-set-cite-format
	  '((?b . "[[bib:%l][%l-bib]]")
	    (?n . "[[notes:%l][%l-notes]]")
	    (?p . "[[papers:%l][%l-paper]]")
	    (?t . "%t")
	    (?h . "** %t\n:PROPERTIES:\n:Custom_ID: %l\n:END:\n[[papers:%l][%l-paper]]")))))
  (define-key org-mode-map (kbd "C-c )") 'reftex-citation)
  (define-key org-mode-map (kbd "C-c (") 'org-mode-reftex-search))
  (add-hook 'org-mode-hook 'org-mode-reftex-setup)
(defun org-mode-reftex-search ()
  ;;jump to the notes for the paper pointed to at from reftex search
  (interactive)
  (org-open-link-from-string (format "[[notes:%s]]" (reftex-citation t))))
#+END_SRC
** DONE Org-Publish
#+BEGIN_EXAMPLE
 #+TITLE:       the title to be shown (default is the buffer name)
     #+AUTHOR:      the author (default taken from user-full-name)
     #+DATE:        a date, an Org timestamp1, or a format string for format-time-string
     #+EMAIL:       his/her email address (default from user-mail-address)
     #+DESCRIPTION: the page description, e.g., for the XHTML meta tag
     #+KEYWORDS:    the page keywords, e.g., for the XHTML meta tag
     #+LANGUAGE:    language for HTML, e.g., ‘en’ (org-export-default-language)
     #+TEXT:        Some descriptive text to be inserted at the beginning.
     #+TEXT:        Several lines may be given.
     #+OPTIONS:     H:2 num:t toc:t \n:nil @:t ::t |:t ^:t f:t TeX:t ...
     #+BIND:        lisp-var lisp-val, e.g., org-export-latex-low-levels itemize
                    You need to confirm using these, or configure org-export-allow-BIND
     #+LINK_UP:     the ``up'' link of an exported page
     #+LINK_HOME:   the ``home'' link of an exported page
     #+LaTeX_HEADER: extra line(s) for the LaTeX header, like \usepackage{xyz}
     #+EXPORT_SELECT_TAGS:   Tags that select a tree for export
     #+EXPORT_EXCLUDE_TAGS:  Tags that exclude a tree from export
     #+XSLT:        the XSLT stylesheet used by DocBook exporter to generate FO file
The #+OPTIONS line is a compact2 form to specify export settings. Here you can:

     H:         set the number of headline levels for export
     num:       turn on/off section-numbers
     toc:       turn on/off table of contents, or set level limit (integer)
     \n:        turn on/off line-break-preservation (DOES NOT WORK)
     @:         turn on/off quoted HTML tags
     ::         turn on/off fixed-width sections
     |:         turn on/off tables
     ^:         turn on/off TeX-like syntax for sub- and superscripts.  If
                you write "^:{}", a_{b} will be interpreted, but
                the simple a_b will be left as it is.
     -:         turn on/off conversion of special strings.
     f:         turn on/off footnotes like this[1].
     todo:      turn on/off inclusion of TODO keywords into exported text
     tasks:     turn on/off inclusion of tasks (TODO items), can be nil to remove
                all tasks, todo to remove DONE tasks, or list of kwds to keep
     pri:       turn on/off priority cookies
     tags:      turn on/off inclusion of tags, may also be not-in-toc
     <:         turn on/off inclusion of any time/date stamps like DEADLINES
     *:         turn on/off emphasized text (bold, italic, underlined)
     TeX:       turn on/off simple TeX macros in plain text
     LaTeX:     configure export of LaTeX fragments.  Default auto
     skip:      turn on/off skipping the text before the first heading
     author:    turn on/off inclusion of author name/email into exported file
     email:     turn on/off inclusion of author email into exported file
     creator:   turn on/off inclusion of creator info into exported file
     timestamp: turn on/off inclusion creation time into exported file
     d:         turn on/off inclusion of drawers, or list drawers to include
#+END_EXAMPLE
#+BEGIN_SRC emacs-lisp
(require 'org-publish)
;; Project 1 homepage
(setq org-publish-project-alist
'(("homepage"
:base-directory "~/Dropbox/Public/homepage/org/"
:base-extension "org"
:publishing-directory "~/Dropbox/Public/homepage/public_html/"
:recursive t
:publishing-function org-publish-org-to-html
:headline-levels 4             ; Just the default for this project.
:auto-preamble t)))
;;          :preparation-function org-publish-my-sitemap)))
;; :exclude "PrivatePage.org"   ;; regexp
;:with-section-numbers nil
;; :table-of-contents nil
;; :auto-preamble t
;; :auto-postamble nil)
;; (defun org-publish-my-sitemap ()
;;   (interactive)
;;   (org-publish-org-sitemap
;;    '("Diary Sitemap"
;;      :base-directory "~/Dropbox/Public/homepage/src/diary/")
;;      "diary.org"))

;; Project 2 for notes
(setq org-publish-project-alist
'(("note-org"
:base-directory "~/Dropbox/notes/org_note/"
:publishing-directory "~/Dropbox/notes/html_note/"
:base-extension "org"
:recursive t
:publishing-function org-publish-org-to-html
:auto-index nil
:index-filename "index.org"
:index-title "index"
:link-home "index.html"
:section-numbers nil
:style "<link rel=\"stylesheet\"
href=\"./style/emacs.css\"
type=\"text/css\"/>")
("note-static"
:base-directory "~/Dropbox/notes/org_note/"
:publishing-directory "~/Dropbox/notes/html_note/"
:recursive t
:base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|swf\\|zip\\|gz\\|txt\\|el"
:publishing-function org-publish-attachment)
("note"
:components ("note-org" "note-static")
:author "bwtian@gmail.com"
)))
(global-set-key [C-S-M-f8] 'org-publish)
;; '("orgfiles" :base-directory "~/Documents/org/"
;;         :base-extension "org"
;;         :publishing-directory "/ssh:backup:~/public_html/org/"
;;         :publishing-function org-publish-attachment)
;;  ))

;; setq org-publish-project-alist
;;       '(
;; |       ("web-extra"
;; |        :base-directory rgr-source  ;; **********************************
;; |        :publishing-directory rgr-publish
;; |        :base-extension "gif\\|jpg\\|jpeg\\|png\\|css"
;; |        :publishing-function org-publish-attachment
;; |          :recursive t
;; |        )
;; |       ("web-org"
;; |        :base-directory rgr-source
;; |        :publishing-directory rgr-publish
;; |        :base-extension "org"
;; |        :publishing-function org-publish-org-to-html
;; |          :recursive t
;; |        :section-numbers nil
;; |        :style "<link rel=stylesheet
;; |                      href=\"./style.css\"
;; |                      type=\"text/css\">"
;; |        :auto-preamble t
;; |        :auto-postamble t
;; |        :preamble (format "<div id='Content'><a href='../'>Back</a> - <a
;; href='%s'>Home</a>" rgr-home)
;; |        :postamble "</div>"
;; |        :author nil
;; |        )
;; |       ("web"
;; |        :components("web-org" "web-extra")
;; |        )
;; |       )
;; |       )
;; `;; ----
;; (setq org-directory (concat my:dropbox "org/"))
;; (setq org-default-notes-file (concat org-directory "schedule.org"))
;; (setq org-publish-project-alist
;;       `(
;;         ("public"
;;          :base-directory ,my:org-publish-webpage
;;          :base-extension "org"
;;          :exclude ".*\.el\\|^Makefile\\|.*\.gpg\\|sitemap\.org\\|^cc-env\\|^images\\|^_config\\|^_site\\|^export-config\.org"
;;          :publishing-directory ,my:org-publish-webpage
;;          :publishing-function my:org-jekyll-publish-to-html
;;          :headline-level 4
;;          :html-extension "html"
;;          :auto-sitemap nil
;;          :recursive nil
;;          )
;;         ("work"
;;          :base-directory ,my:org-publish-webpage-work
;;          :base-extension "org"
;;          :exclude ".*\.el\\|^Makefile\\|.*\.gpg\\|sitemap\.org\\|^cc-env\\|^images\\|^_config\\|^_site\\|^export-config\.org"
;;          :publishing-directory ,my:org-publish-webpage-work
;;          :publishing-function my:org-jekyll-publish-to-html
;;          :headline-level 4
;;          :html-extension "html"
;;          :auto-sitemap nil
;;          :recursive nil
;;          )
;;         ("img"
;;          :base-directory ,my:org-publish-webpage-img
;;          :base-extension "jpg\\|png"
;;          :publishing-directory ,my:org-publish-webpage-img
;;          :publishing-function org-publish-attachment
;;          )
;;         ("emacs"
;;          :base-directory ,my:user-emacs-config-directory
;;          :base-extension "org"
;;          :exclude "^export-config\.org\\|^Makefile\\|sitemap\.org"
;;          :publishing-directory ,my:org-publish-emacs-pages
;;          :publishing-function my:org-jekyll-publish-to-html
;;          :headline-level 4
;;          :auto-sitemap nil
;;          :recursive nil
;;          )
;;         ("web" :components ("public" "work" "img"))
;;         ("emacs" :components ("emacs"))
;;         ))
#+END_SRC
** Org-Image
#+BEGIN_SRC emacs-lisp
(defun my-org-screenshot ()
  "Take a screenshot into a time stamped unique-named file in the
same directory as the org-buffer and insert a link to this file."
  (interactive)
  (setq filename
        (concat
         (make-temp-name
          (concat (buffer-file-name)
                  "_"
                  (format-time-string "%Y%m%d_%H%M%S_")) ) ".png"))
  (call-process "import" nil nil nil filename)
  (insert (concat "[[" filename "]]"))
  (org-display-inline-images))
#+END_SRC


   
